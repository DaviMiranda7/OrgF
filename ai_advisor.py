from flask import Blueprint, request, jsonify
from datetime import datetime, timedelta
from src.models.user import db
from src.models.transaction import Transaction
from src.models.category import Category
from src.models.budget import Budget, Goal
import json

ai_advisor_bp = Blueprint('ai_advisor', __name__)

class FinancialAdvisor:
    """Classe para simular o assessor financeiro IA"""
    
    def __init__(self):
        self.knowledge_base = {
            'emergency_fund': {
                'description': 'Reserva de emerg√™ncia √© fundamental para seguran√ßa financeira',
                'recommendation': 'Mantenha de 3 a 6 meses de gastos essenciais em uma reserva de emerg√™ncia'
            },
            'debt_management': {
                'description': 'Gest√£o de d√≠vidas √© crucial para sa√∫de financeira',
                'recommendation': 'Priorize quitar d√≠vidas com juros altos primeiro, como cart√£o de cr√©dito'
            },
            'investment_basics': {
                'description': 'Investimentos s√£o importantes para crescimento patrimonial',
                'recommendation': 'Comece com investimentos de baixo risco como Tesouro Direto e CDBs'
            },
            'budgeting': {
                'description': 'Or√ßamento √© a base de uma vida financeira organizada',
                'recommendation': 'Use a regra 50-30-20: 50% necessidades, 30% desejos, 20% poupan√ßa'
            }
        }
    
    def analyze_user_finances(self, user_id):
        """Analisar as finan√ßas do usu√°rio"""
        try:
            # Obter transa√ß√µes dos √∫ltimos 3 meses
            three_months_ago = datetime.utcnow() - timedelta(days=90)
            transactions = Transaction.query.filter(
                Transaction.user_id == user_id,
                Transaction.date >= three_months_ago
            ).all()
            
            # Calcular totais
            total_income = sum(t.amount for t in transactions if t.transaction_type == 'income')
            total_expense = sum(t.amount for t in transactions if t.transaction_type == 'expense')
            balance = total_income - total_expense
            
            # Analisar gastos por categoria
            expense_by_category = {}
            for transaction in transactions:
                if transaction.transaction_type == 'expense':
                    category_name = transaction.category.name if transaction.category else 'Sem categoria'
                    expense_by_category[category_name] = expense_by_category.get(category_name, 0) + transaction.amount
            
            # Obter or√ßamentos ativos
            active_budgets = Budget.query.filter_by(user_id=user_id, is_active=True).all()
            
            # Obter metas
            goals = Goal.query.filter_by(user_id=user_id, is_achieved=False).all()
            
            return {
                'total_income': total_income,
                'total_expense': total_expense,
                'balance': balance,
                'expense_by_category': expense_by_category,
                'active_budgets': len(active_budgets),
                'pending_goals': len(goals),
                'transaction_count': len(transactions)
            }
        except Exception as e:
            return None
    
    def generate_insights(self, user_analysis):
        """Gerar insights baseados na an√°lise financeira"""
        insights = []
        
        if not user_analysis:
            return ['N√£o foi poss√≠vel analisar suas finan√ßas. Adicione algumas transa√ß√µes primeiro.']
        
        # Insight sobre saldo
        if user_analysis['balance'] > 0:
            insights.append(f"‚úÖ Parab√©ns! Voc√™ teve um saldo positivo de R$ {user_analysis['balance']:.2f} nos √∫ltimos 3 meses.")
        else:
            insights.append(f"‚ö†Ô∏è Aten√ß√£o: Voc√™ teve um saldo negativo de R$ {abs(user_analysis['balance']):.2f} nos √∫ltimos 3 meses.")
        
        # Insight sobre gastos por categoria
        if user_analysis['expense_by_category']:
            highest_expense_category = max(user_analysis['expense_by_category'], key=user_analysis['expense_by_category'].get)
            highest_amount = user_analysis['expense_by_category'][highest_expense_category]
            insights.append(f"üìä Sua maior categoria de gastos √© '{highest_expense_category}' com R$ {highest_amount:.2f}.")
        
        # Insight sobre or√ßamentos
        if user_analysis['active_budgets'] == 0:
            insights.append("üí° Considere criar or√ßamentos para controlar melhor seus gastos.")
        
        # Insight sobre metas
        if user_analysis['pending_goals'] == 0:
            insights.append("üéØ Que tal definir algumas metas financeiras para se motivar?")
        
        return insights
    
    def answer_question(self, question, user_id=None):
        """Responder perguntas sobre finan√ßas"""
        question_lower = question.lower()
        
        # An√°lise do usu√°rio se fornecido
        user_analysis = None
        if user_id:
            user_analysis = self.analyze_user_finances(user_id)
        
        # Respostas baseadas em palavras-chave
        if any(word in question_lower for word in ['reserva', 'emerg√™ncia', 'emergencia']):
            response = self.knowledge_base['emergency_fund']['recommendation']
            if user_analysis and user_analysis['balance'] > 0:
                response += f" Com base no seu saldo atual, considere separar parte dos seus R$ {user_analysis['balance']:.2f} para a reserva."
            return response
        
        elif any(word in question_lower for word in ['d√≠vida', 'divida', 'dever', 'cart√£o', 'cartao']):
            return self.knowledge_base['debt_management']['recommendation']
        
        elif any(word in question_lower for word in ['investir', 'investimento', 'aplicar', 'render']):
            response = self.knowledge_base['investment_basics']['recommendation']
            if user_analysis and user_analysis['balance'] > 0:
                response += f" Voc√™ tem R$ {user_analysis['balance']:.2f} de saldo positivo que poderia ser investido."
            return response
        
        elif any(word in question_lower for word in ['or√ßamento', 'orcamento', 'controlar', 'gastar']):
            response = self.knowledge_base['budgeting']['recommendation']
            if user_analysis:
                response += f" Seus gastos atuais s√£o de R$ {user_analysis['total_expense']:.2f} nos √∫ltimos 3 meses."
            return response
        
        elif any(word in question_lower for word in ['economizar', 'poupar', 'guardar']):
            response = "Para economizar, analise seus gastos e identifique onde pode cortar. Comece com pequenas mudan√ßas."
            if user_analysis and user_analysis['expense_by_category']:
                highest_category = max(user_analysis['expense_by_category'], key=user_analysis['expense_by_category'].get)
                response += f" Sua maior categoria de gastos √© '{highest_category}', talvez seja um bom lugar para come√ßar."
            return response
        
        elif any(word in question_lower for word in ['meta', 'objetivo', 'sonho']):
            return "Definir metas financeiras √© essencial! Seja espec√≠fico, defina prazos e acompanhe o progresso regularmente."
        
        else:
            return "Desculpe, n√£o entendi sua pergunta. Posso ajudar com temas como: reserva de emerg√™ncia, investimentos, or√ßamento, d√≠vidas, economia e metas financeiras."

@ai_advisor_bp.route('/ai-advisor/chat', methods=['POST'])
def chat_with_advisor():
    """Conversar com o assessor financeiro IA"""
    try:
        data = request.get_json()
        
        if 'question' not in data:
            return jsonify({'error': 'question √© obrigat√≥rio'}), 400
        
        question = data['question']
        user_id = data.get('user_id')
        
        # Inicializar o assessor
        advisor = FinancialAdvisor()
        
        # Obter resposta
        response = advisor.answer_question(question, user_id)
        
        return jsonify({
            'question': question,
            'response': response,
            'timestamp': datetime.utcnow().isoformat()
        }), 200
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@ai_advisor_bp.route('/ai-advisor/insights', methods=['GET'])
def get_financial_insights():
    """Obter insights financeiros personalizados"""
    try:
        user_id = request.args.get('user_id', type=int)
        if not user_id:
            return jsonify({'error': 'user_id √© obrigat√≥rio'}), 400
        
        # Inicializar o assessor
        advisor = FinancialAdvisor()
        
        # Analisar finan√ßas do usu√°rio
        user_analysis = advisor.analyze_user_finances(user_id)
        
        # Gerar insights
        insights = advisor.generate_insights(user_analysis)
        
        return jsonify({
            'insights': insights,
            'analysis': user_analysis,
            'timestamp': datetime.utcnow().isoformat()
        }), 200
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@ai_advisor_bp.route('/ai-advisor/suggestions', methods=['GET'])
def get_suggestions():
    """Obter sugest√µes de economia e otimiza√ß√£o"""
    try:
        user_id = request.args.get('user_id', type=int)
        if not user_id:
            return jsonify({'error': 'user_id √© obrigat√≥rio'}), 400
        
        # Inicializar o assessor
        advisor = FinancialAdvisor()
        
        # Analisar finan√ßas do usu√°rio
        user_analysis = advisor.analyze_user_finances(user_id)
        
        suggestions = []
        
        if not user_analysis:
            return jsonify({
                'suggestions': ['Adicione algumas transa√ß√µes para receber sugest√µes personalizadas.']
            }), 200
        
        # Sugest√µes baseadas na an√°lise
        if user_analysis['expense_by_category']:
            # Sugest√£o para maior categoria de gastos
            highest_category = max(user_analysis['expense_by_category'], key=user_analysis['expense_by_category'].get)
            highest_amount = user_analysis['expense_by_category'][highest_category]
            
            if highest_amount > user_analysis['total_income'] * 0.3:  # Mais de 30% da renda
                suggestions.append({
                    'type': 'expense_reduction',
                    'category': highest_category,
                    'message': f"Voc√™ gasta R$ {highest_amount:.2f} em '{highest_category}'. Considere reduzir em 10-20%.",
                    'potential_saving': highest_amount * 0.15
                })
        
        # Sugest√£o de reserva de emerg√™ncia
        if user_analysis['balance'] > 0:
            emergency_fund_target = user_analysis['total_expense'] * 0.5  # 6 meses de gastos
            suggestions.append({
                'type': 'emergency_fund',
                'message': f"Considere criar uma reserva de emerg√™ncia de R$ {emergency_fund_target:.2f}.",
                'target_amount': emergency_fund_target
            })
        
        # Sugest√£o de investimento
        if user_analysis['balance'] > user_analysis['total_expense'] * 0.1:  # Sobra mais de 10%
            suggestions.append({
                'type': 'investment',
                'message': "Voc√™ tem um bom saldo positivo. Considere investir parte em Tesouro Direto ou CDBs.",
                'recommended_amount': user_analysis['balance'] * 0.7
            })
        
        return jsonify({
            'suggestions': suggestions,
            'timestamp': datetime.utcnow().isoformat()
        }), 200
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@ai_advisor_bp.route('/ai-advisor/budget-analysis', methods=['GET'])
def analyze_budget_performance():
    """Analisar performance dos or√ßamentos"""
    try:
        user_id = request.args.get('user_id', type=int)
        if not user_id:
            return jsonify({'error': 'user_id √© obrigat√≥rio'}), 400
        
        # Obter or√ßamentos ativos
        active_budgets = Budget.query.filter_by(user_id=user_id, is_active=True).all()
        
        budget_analysis = []
        
        for budget in active_budgets:
            # Calcular gastos no per√≠odo do or√ßamento
            spent_amount = db.session.query(db.func.sum(Transaction.amount)).filter(
                Transaction.user_id == user_id,
                Transaction.category_id == budget.category_id,
                Transaction.transaction_type == 'expense',
                Transaction.date >= budget.start_date,
                Transaction.date <= budget.end_date
            ).scalar() or 0
            
            usage_percentage = (spent_amount / budget.amount * 100) if budget.amount > 0 else 0
            
            # Gerar an√°lise
            if usage_percentage > 100:
                status = 'exceeded'
                message = f"‚ö†Ô∏è Or√ßamento de '{budget.category.name}' ultrapassado em {usage_percentage - 100:.1f}%"
            elif usage_percentage > 80:
                status = 'warning'
                message = f"‚ö° Or√ßamento de '{budget.category.name}' quase no limite ({usage_percentage:.1f}%)"
            else:
                status = 'good'
                message = f"‚úÖ Or√ßamento de '{budget.category.name}' sob controle ({usage_percentage:.1f}%)"
            
            budget_analysis.append({
                'budget_id': budget.id,
                'budget_name': budget.name,
                'category_name': budget.category.name,
                'budget_amount': budget.amount,
                'spent_amount': spent_amount,
                'usage_percentage': round(usage_percentage, 2),
                'status': status,
                'message': message
            })
        
        return jsonify({
            'budget_analysis': budget_analysis,
            'total_budgets': len(active_budgets),
            'timestamp': datetime.utcnow().isoformat()
        }), 200
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

